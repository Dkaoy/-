【企业开发简介】
	1JavaEE规范
	13种技术规范
	WEB
	系统结构:
		基础结构划分:CS结构；BS结构
	技术选型：
		Model1模型；MVC模型
	部署方式划分：
		一体式结构；垂直拆分结构；分布式结构；微服务结构；
	

	【CS结构】：客户端+服务器{更新维护比较麻烦}
	【BS结构】：浏览器+服务器{更新方便}


【Tomcat服务器】

	常用的应用服务器
	重量级服务器：weblogic；websphereAS;JBOSSAS
	轻量级服务器：Tomcat；

	tomcat.apache.org
	【基本使用】
	1启动bin目录下startup.    2关闭shutdown.
	3部署项目：在webapps目录下创建一个文件夹，将资源放到该文件夹，启动tomcat，并配置正确访问路径

	【idea集成tomcat】
	1run中点击edit-configurations；2点击default->Tomcat Server->Local；3configure关联本地路径
	
	通过war包发布

	【Tomcat配置文件】
	主配置文件server.xml
	
	【Tomcat配置虚拟目录】
	虚拟目录：可以发布任意目录下的项目
	1编辑server.xml配置文件，找到<Host>标签
	2加入以下内容
		<Context path="/my(这是访问路径)" docBase="d:my（这是本地路径）"/>
	
	【Tomcat配置虚拟主机】
	虚拟主机作用：可以访问指定路径的名称
	1编辑server.xml配置文件，找到<Engine>标签
	2加入以下内容
		<Host name="www.webdemo.com" appBase="webapps"
			unpackWARs="true" autoDeploy="true">
		       <Context path="" docBase="wedemo"/>
	3修改hosts文件
		

	【HTTP协议】
		超文本传输协议
		基于TCP/IP协议
	
	【HTTP协议的请求】
		1请求的组成部分
			①请求行
			②请求头
			③请求空行
			④请求体
		2请求方式
			GET
			POST
			{只有POST方式有请求体}
	
	【HTTP协议的响应】
		2响应的组成部分
			①响应行
			②响应头
			③响应空行
			④响应体



	【发布静态资源】
	【发布动态资源】
		Servlet是运行在java服务端的程序，用于接收和响应来自客户端的基于HTTP协议的请求。
		核心方法service();任何客户端的请求都会经过该方法
	
	【servlet声明】
	<servlet>
		<servlet-name>名称</servlet-name>
		<servlet-class>路径</servlet-class>
	</servlet>	

	servlet映射
	<servlet-mapping>
		<servlet-name>和声明中的名称完全一样</servlet-name>
		<url-pattern>（在url中访问的路径）/路径</url-pattern>
	</servlet-mapping>				
		

Servlet	
	实现接口或者继承实现类
	Servlet接口	GenericServlet抽象类	HttpServlet抽象类		ServletConfig接口		ServletContext接口
	
·	执行过程
	生命周期：对象从创建到销毁的过程
	线程安全：servlet是线程不安全的，两种方案（1）定义局部变量（2）使用同步代码块sysch
	
	
	【servlet映射方式】
	（1）访问的资源路径必须和映射配置完全相同。
	（2）/+通配符。（只要符合目录结构即可，不用考虑结尾）
	（3）通配符+固定格式结尾。（只要符合固定格式结尾即可，不用考虑前面的路径）

	【servlet多路径映射】
	path.getlastof(/)
	
	【Servlet创建时机】
	1第一次访问时创建
	2服务器加载时创建
	
	修改servlet创建时机
	在xml配置文件中在<servlet>标签中添加<load-on-startup>标签
	正整数代表服务器加载时创建，值越小优先级越高，负整数或不写代表第一次访问时创建


	默认servlet
	
		

	servletConfig
	是cervlet配置参数对象，为每一个servlet提供一些初始化配置
	【配置方式】
	在<servlet>标签中，通过<init-param>标签来配置，有两个子标签。
	<param-name>：代表初始化参数的key
	<param-value>：代表初始化参数的value

	【常用方法】
	返回值			方法名				说明
	String			getInitParameter(String name)	根据参数名称获取参数的值
	Enumeration<String>	getInitParameterName()		获取所有参数名称的枚举
	String			getServletName()			获取Servlet的名称、
	ServletContext		GETservletContext()			获取ServletContext对象
	
	
	1声明ServletConfig
	2通过init方法，来对ServletConfig对象进行赋值
	3演示ServletConfig常用方法
	（1）根据key获取config
		String encodingValue = config.getInitParameter("encoding")
		key.hasMoreElements()
		key.nextElement()

	(2)获取servlet的名称
	config.getServletName();
	
	(3)获取servletContext对象
	config.getServletContext();		
	


	ServletContext
		应用上下文对象，每一个应用中只有一个ServletContext对象
		作用：可以配置和获得应用的全局初始化参数，可以实现Servlet之间的数据共享
		
	域对象：指对象具有作用范围，可以实现数据的共享
	
	

	ServletContext配置方式
	在<web-app>标签中，通过<context-param>标签来配置，有两个子标签
	<param-name>：代表全局初始化参数key
	<param-value>：代表全局初始化参数value

	

	ServletContext常用方法
	返回值		方法名				说明
	String		getInitParamter(String name)		根据名称获取全局配置的参数
	String		getContextPath()			获取当前应用的访问虚拟目录
	String		getRealPath(String name)		根据虚拟目录获取应用部署的磁盘绝对路径
	

	void		setAttribute(String name,Object value)	向应用域对象中存储数据
	Object		getAttribute(String name)		通过名称获取应用域对象中的数据
	void		removeAttribute(String name)		通过名称移除应用域对象中的数据




	servlet3.0规范
	自动注解开发的实现步骤
		1创建一个web项目
		2定义一个类，继承HttpServlet方法
		3重写doGet和doPost方法
		4在类上使用@WebServlet注解配置Servlet
		5部署并启动项目
		6测试
	

	手动创建容器的介绍
	实现ServletContainerInitializer接口
		步骤
		1定义一个类，继承HttpServlet方法
		2重写doGet和doPost方法
		3定义一个类，实现ServletContainerInitializer接口
		4在src目录下创建一个META-INF的包
		5在META-INF包下创建一个services的包
		6在services包下创建一个javax.servlet.ServletContainerInitializer的文件
		7文件中的内容为容器实现类的全类名
		8在容器实现类中的onStartup方法中完成注册servlet
		9部署并启动项目
		



	【请求和响应】
		请求对象
			客户端浏览器向服务端发出询问
		请求对象常用方法
			获取各种路径
			返回值		方法名			说明
			String		getContextPath()		获取虚拟目录名称、
			String		getServletPath()		获取Servlet映射路径
			String		getRemoteAddr()		获取访问者ip地址
			String		getQueryString()		获取请求的消息数据
			String		getRequestURI()		获取统一资源标识符
			StringBuffer	getRequestURL()		获取统一资源定位符
		获取请求头信息方法
			String		getHeader(String name)	根据请求头名称获取一个值
			Enumeration<String>	getHeaders(String name)	根据请求头名称获取多个值
			Enumeration<String>	getHeaderNames()		获取所有请求头名称
		获取请求参数信息的方法
			String			getParameter(String name)		根据名称获取数据
			String[]			getParameterValues(String name)	根据名称获取所有数据
			Enumeration<String>	getParameterNames()		获取所有名称
			Map<String,String[]>	getParameterMap()			获取所有参数的键值对
		获取请求参数并封装对象
			1手动封装：逐个调用getParameter
			2反射封装：调用getParameterMap()方式，for遍历，属性描述器PropertyDescriptor pd = new ;pd.getWriteMethod;执行方法，invoke();
			3工具类封装:通过beanutils包，调用getParameterMap()方式，BeanUtils.populate();

		通过流对象获取请求信息（post方式才有）
			BufferedReader		getReader()	获取字符输入流
			ServletInputStream		getInputStream()	获取字节输入流
	
			
	中文乱码问题
	get方式没有乱码问题，post方式有问题，可以通过setCharacterEncoding()方法来解决
	（在获取参数之前使用req.setCharacterEncoding()来解决中文乱码问题）
	
	请求域：可以在一次范围内进行数据共享
		请求对象操作共享数据方法
			void			setAttribute(String name,Object value)	向请求域对象中存储数据
			Object			getAttribute(String name)		通过名称获取请求域对象中的数据
			void			removeAttribute(String name)		通过名称移除请求域对象中的数据
	
	请求转发：客户端的请求到达之后，需要借助其他servlet来实现功能
		特点：	浏览器地址栏不变
			域对象中的数据不丢失
			负责转发的servlet转发前后的响应正文会丢失
			由转发的目的地来响应客户端
		方法：
			返回值			方法名				说明
			RequestDispatcher		getRequestDispatcher(String name)	获取请求调度对象
			void			forward(ServletRequest req,ServletResponse resp)		实现转发
	
	请求包含：可以合并其他servlet的功能一起响应给客户端
		特点：	浏览器地址栏不变
			域对象中的数据不丢失
			被包含的servlet的响应头会丢失
		方法：	
			RequestDispatcher		getRequestDispatcher(String name)	获取请求调度对象
			void			include(ServletRequest req,ServletResponse resp)		实现包含
	



	【响应对象】
		常见状态码
			200	成功
			302	重定向
			304	请求资源未改变，使用缓存
			400	请求错误，常见于请求参数错误
			404	请求资源未找到
			405	请求方式不支持
			500	服务器错误
						
	
	字节流响应消息resp	
			ServletOutputStream	getOutputStream()			获取响应字节输出流对象
			void			setContentType("text/html;charset=UTF-8")	设置响应内容类型，解决中文乱码问题
			
·	字符流响应消息	
			PrintWriter		getWriter()			获取响应字符输出流对象
			void			setContentType("text/html;charset=UTF-8")	设置响应内容类型，解决中文乱码问题


·	响应图片
		//        通过文件相对路径获取绝对路径
        		String realPath = getServletContext().getRealPath("/img/visa.png");
       		 //        1创建字节输入流对象
       		 BufferedInputStream bis = new BufferedInputStream(new FileInputStream(realPath));
		//        2通过响应对象获取字节输出流对象
    		 ServletOutputStream os = resp.getOutputStream();
		//        3循环读写
        		byte[] arr = new byte[1024];
       		 int len = 0;
       		 while ((len = bis.read(arr)) != -1) {
            		os.write(arr, 0, len);

       		 }
		//        4释放资源
        		bis.close();
		{1创建字节输入流对象，关联读取的图片路径
		2通过响应对象获取字节输出流对象
		3循环读取和写出图片
		4关闭流}


	设置缓存
		缓存：对于不经常变化的数据，我们可以设置合理缓存时间，以避免浏览器频繁请求服务器，以此来提高效率
		void		setDateHeader(String name,long time)		设置消息头添加缓存

	定时刷新：过了指定时间，页面自动跳转
		void		setHeader(String name,String value)		设置消息头定时刷新
	
	        	resp.setHeader("Refresh","3;URL=/stu/addStudent.html");

	请求重定向
		原理：设置响应状态码302 	resp.setStatus(302);
		          设置响应的资源路径（通过响应消息头location来指定）resp.setHeader("location","/response/responsedemo");


		响应对象重定向方法
		void		sendRedirect(String name)			设置重定向

		
	文件下载
		1创建字节输入流对象，关联读取的文件
		2设置响应消息头支持的类型
		3设置响应消息头以下载方式打开资源
		4通过响应对象获取字节输出流对象
		5循环读写
		6释放资源
		//        1创建字节输入流对象，关联读取的文件
		        String realPath = getServletContext().getRealPath("/img/visa.png");
		        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(realPath));
		//        2设置响应消息头支持的类型
 		       /*
 		       Contrnt-type    消息头名称，支持的类型
 		       application/octet-stream 消息头参数 应用的类型为字节流
		        Content-Disposition 消息头名称，处理的形式
		        attachment;filename=visa.png    消息头参数，附件形式进行处理，指定下载文件的名称
		         */
		        resp.setHeader("Contrnt-type","application/octet-stream");
		//        3设置响应消息头以下载方式打开资源
		        resp.setHeader("Content-Disposition","attachment;filename=visa.png");
		//        4通过响应对象获取字节输出流对象
		        ServletOutputStream os = resp.getOutputStream();
		//        5循环读写
		        byte[] arr=new byte[1024];
 		       int len;
		        while ((len=bis.read(arr))!=-1){
		            os.write(arr,0,len);
		        }
		//        6释放资源
		        bis.close();
	



	【COOKIE】和class文件一样
		会话介绍：浏览器和服务器之间的多次请求和响应
		cookie介绍：客户端会话管理技术，把要共享的数据保存到客户端，每次请求时，把会话信息带到服务器，从而实现多次请求的数据共享
		cookie属性：
			属性名		作用			是否重要
			name		cookie名称		必须属性
			value		cookie的值（不支持中文）	必须属性
			path		cookie的路径		重要
			domain		cookie域名		重要
			maxAge		cookie的存活时间		重要
			version		cookie版本号		不重要
			comment		cookie的描述		不重要

		cookie方法
		方法名				作用
		Cookie(String name,String value)	构建方法创建对象
		属性对应的set和get方法		赋值和获取值
	
		cookie添加和获取
		添加
		void		addCookie(Cookie cookie)		向客户端添加Cookie			
		
		获取
		Cookie[]		getCookies()			获取所有的Cookie
		
	【Cookie使用】
		需求：通过cookie记录最后访问时间，并在浏览器上显示出来
		实现步骤
			1通过响应对象写出一个提示信息
			2创建Cookie对象，指定name和value	
			3设置Cookie最大存活时间
			4通过响应对象将Cookie对象添加到客户端
			5通过请求对象获取Cookie对象
			6将Cookie对象中的访问时间写出
		//        1通过响应对象写出一个提示信息
		        resp.setContentType("text/html;charset=UTF-8");
		        PrintWriter pw = resp.getWriter();
		        pw.write("欢迎访问本网站，最后登录时间为：<br>");
		
		//        2创建Cookie对象，指定name和value
		        Cookie cookie = new Cookie("time", System.currentTimeMillis() + "");
		//        3设置Cookie最大存活时间
		        cookie.setMaxAge(3600);
		//        4通过响应对象将Cookie对象添加到客户端
		        resp.addCookie(cookie);
		//        5通过请求对象获取Cookie对象
		        Cookie[] arr = req.getCookies();
		        for (Cookie c : arr) {
		            if ("time".equals(c.getName())) {
		//                6将Cookie对象中的访问时间写出
		                String value = c.getValue();
		                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		                pw.write(sdf.format(new Date(Long.parseLong(value))));
		            }
		        }

	【Cookie细节】
		数量限制：每个网站最多只有20个cookie，且每个大小不超过4kb，所有网站cookie总数不超过300个
		名称限制：只能包含ascci码表中的字母数字字符。不包含逗号，分号，空格，不能以$开头
			值不支持中文
		存活时间限制：setAge()方法接收到的数字
				负整数：当前会话有效，浏览器关闭则清除
				0：立即清除
				正整数：以秒为单位设置存活时间
		访问路径限制：取自第一次访问资源路径前缀，只要以前缀开头（包括子路径）都可以访问到
			使用setPath()方法设置指定路径
	
	【Session】
		httpsession：服务器端会话管理技术
			本质也是采用客户端会话管理技术，只不过在客户端保存的是一个特殊标识，而共享的数据保存到了服务器端的内存对象中
			每次请求时，会将特殊标识带到服务器端，根据标识来找到对应的内存空间，从而实现数据共享
		作用：可以实现数据共享
		
		httpsession常用方法
			void		setAttribute(String name,Object value)		设置共享数据
			Object		getAttribute(String name)			获取共享数据
			void		removeAttribute(String name)			移除共享数据
			String		getId()					获取唯一标识符名称
			void		Invalidate()				让session立即失效
		
			
··		httpsession获取（通过HttpServletRequest对象来获取）
			HttpSession	getSession()				获取HttpSession对象
			HttpSession	getSession(boolean create)			获取HttpSession对象，未获取到是否自动创建
			
		HttpSession的使用
			通过第一个servlet设置共享数据用户名，并在第二个servlet获取到
			步骤
			1在第一个servlet获取到请求的用户名信息
			2获取httpSession对象
			3将用户名设置到共享数据中
			4在第二个servlet中获取httpsession对象
			5获取共享数据用户名
			6将获取到的用户名响应给客户端浏览器
		//        获取请求的用户名
		        String username = req.getParameter("username");
		
		//        2获取httpsession的对象
		        HttpSession session = req.getSession();
		//        3.将用户名添加到共享数据
		        session.setAttribute("username",username);
		    }
		//        获取httpsession的对象
		        HttpSession session = req.getSession();
		//        2获取共享数据
		        Object username = session.getAttribute("username");
		//        3.将数据响应给浏览器
		        resp.getWriter().write(username+"");
		    }			
			

		httpsession细节
		·唯一标识查看：请求消息头
		·浏览器禁用cookie：	【url重写】：resp.encodeURL("全路径")；
		·钝化和活化（服务器自动完成）
			钝化：序列化，将长时间不用担还没有到期的httpsession进行序列化，写到磁盘上
			活化：相反的状态

			
	JSP（java server pages）：是一种动态网页技术标准
		部署在服务器上，处理客户发送的请求，并根据请求内容动态生成HTML、XML或其他格式文档的web网页，然后再响应给客户端
		
	jsp本质是servlet
	
	
【HTTP协议】
【发布静态资源】
HTML，CSS，JavaScript都属于静态资源
【发布动态资源】
JSP，Servlet都属于动态资源

	JSP案例
		1创建一个web项目
		2再web目录下创建一个index.jsp文件
		3在文件中写一句内容：这是我的第一个JSP
	
	JSP执行过程
		客户端浏览器	tomcat服务器	jsp_demo		index.jsp		index_jsp.java	index_jsp.class

		             发起请求		
				     解析请求地址
				
				                 找到具体应用	
			
						         找到jsp文件

								        翻译jsp文件		
		
											编译java文件
	

						端户客给应响


	JSP文件内容
		
	JSP语法
		jsp注释
			<%--注释的内容--%>
		java代码块
			<%JAVA代码%>
		
			<%
   			 System.out.println("hello");	输出在控制台
   			 out.print("hello");		输出在页面
 			 %>

		jsp表达式
			<%=表达式%>	相当于对输出在页面的简化
		jsp声明
			<%!声明变量或方法%>

	如果有!代表成员变量，没有!代表局部变量
	


	JSP指令
		page指令
		<%@page 属性名=属性值 属性名=属性值%>
			属性名		作用
			contentType	响应正文支持的类型和设置编码格式
			language		使用的语言，默认java		
			errorPage		当前页面出现异常后跳转的页面
			isErrorPage	是否抓住异常，如果为true则页面中就可以使用异常对象，默认是false
			import		导包import="java.util.ArrayList"
			session		是否创建HttpSession对象，默认是true
			buffer		设定JspWriter输出jsp内容缓存的大小，默认8kb
			pageEncoding	翻译jsp时所用的编码格式
			isElgnored	是否忽略EL表达式，默认是false

		include指令：可以包含其他页面
		<%@include file=包含的页面%>

		taglib指令：可以引入外部标签库
		<%@taglib uri=标签库地址 prefix=前缀名称%>


	JSP细节
		九大隐式对象
			隐式对象名称		代表实际对象
			request			javax.servlet.http.HttpServletRequest
			response			javax.servlet.http.HttpServletResponse
			session			javax.servlet.http.HttpSession
			application		javax.servlet.ServletContext
			page			java.lang.Object
			config			javax.servlet.ServletConfig
			exception			java.lang.Throwable
			out			javax.servlet.jsp.JspWriter
			pageContext(JSP独有)	javax.servlet.jsp.PageContext

	四大域对象
	pagecontext：页面范围，只能在当前页使用，开发中用的很少
	ServletRequest：请求范围，一次请求或当前请求转发用，请求转发后，再次转发时请求域丢失
	HttpSession：会话范围，多次请求数据共享时使用，多次请求共享数据，但不同的客户端不能共享
	ServletContext：应用范围，整个应用都可以使用，少用，除非对数据修改需要做同步处理


	MVC模型
		M(Model):模型。用于封装数据，封装的是数据模型
		V(VIEW):视图。用于显示数据，动态资源用JSP页面，静态资源用HTML页面
		C(controller):控制器。用于处理请求和响应，例如Servlet
	
	
	






































