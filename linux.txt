操作系统
管理与配置内存；决定系统资源供需的优先次序；控制输入设备与输出设备；操作网络与管理文件系统等基本事务；提供了一个让用户与系统交互的操作系统。

桌面操作系统；服务端操作系统；嵌入式操作系统；移动设备操作系统Unix；

什么是linux？
  是一种免费使用和自由传播的类Unix操作系统；

特点：①一切都是文件
          ②每个软件都有确定的用途
          完全免费
	完全兼容POSIX1.0标准
                多用户，多任务
	良好的界面
	支持多种平台
	
①源代码完全开源
②具有非常强大的网络功能
③工具链完整

Linux和Unix区别
linux开源Unix不开源
硬件适用Unix只能运行在特定的设备
本质不同Unix用户自主权小

linux和windows区别
系统界面
驱动程序
系统使用
学习
软件使用
开放性
文件格式不同
免费与收费
技术支持
安全性
开源
使用习惯
软件与支持


Linux发行商和常见发行版
Centos：主流；免费；更新方便

Centos下载      https://www.centos.org/download/


etc系统中的配置文件
bin系统预设执行文件的放置位置
sbin
usr
var

			命令 ：	ls -l 显示文件
				date显示日期
克隆   
快照

linux命令--账号管理（需要管理员权限）
	创建用户：useradd (选项) 用户名
	用户口令：passwd (选项) 用户名
	修改用户：usermod 选项 用户名
	删除用户：userdel (选项) 用户名				

               --用户组 
	创建用户组：groupadd （选项）用户组名
	修改用户组：groupmod （选项）用户组名
	查询用户所属组：groups 用户名
	删除用户组：groupdel 用户组名


	--管理用户组内成员
	语法：gpasswd （可选项）用户名 组名
			-a ：添加用户到组
			-d ：从组中删除用户
			-A ：指定管理员
			-M ：指定组成员和-A的用途差不多
			-r ：删除密码
			-R :限制用户登入组，只有组中的成员才可以newgrp加入该组。
·		
		grep '用户组' /etc/group显示用户组中的成员


	--日期管理
	语法：date [参数选项]
			-d<字符串>：显示字符串所指的日期与时间。字符串前必须加上双引号
			-s<字符串>：根据字符串来设置日期与时间。字符串前必须加上双引号
			-u：显示GMT
			--help：在线帮助；
			--version：显示版本信息

	--显示用户
	语法：logname [--help][--version] 显示登陆账号的信息
	
	--切换用户
	语法：su
		-c：切换用户执行一条命令，执行完在切换回该用户   su -c ls root
		
	--id命令
	语法：id [-g][--help][--version] 查看当前用户的详细信息（用户id，群组id，所属组）
	
	--sudo命令 (提权操作)
		sudo[参数选项] 
			-u 

	--top命令(任务管理器)按下q停止
		top[-][c]
		-c显示完整的command命令
		-p PID 实时显示指定进程的信息
	--结束监控快捷键q

	--ps命令（显示当前进程的信息）
		ps[-]
		-A 显示所有进程信息
		-ef 显示系统中所有的进程信息（完整信息）
		-u 用户名 显示指定用户的所有的进程信息

	--kill命令（）
		kill [-s <信息名称或编号>] [程序] 终端执行中的命令
		kill PID 结束进程
		kill -9 PID 强制结束进程
		kill -9 $(ps -ef | grep 用户名) 强制结束指定用户的进程
		killall -u 用户名 强制结束指定用户的进程

	--关机命令
	shutdown [] 关机
		-c 取消关机
		-h now 立马关机
		+1“警号信息”  延迟一分钟关机，并给出警告信息
		-r +1“警告信息”在一分钟之后重启，并给出警告信息
	
	--重启命令
	reboot []重启
		

	--who命令 （显示当前登录系统的用户）
	who []
		-H :显示标题信息
		-u ：显示闲置时间，如果一份之后有操作，则显示点，如果超过24小时无操作，则显示old字符串
		-q： 只显示登入系统的账户名和总人数
		-s：
		-w：显示用户的信息状态栏
		--help
		--version	

	--timedatectl命令
		timedatectl 校正服务器时间、时区
		timedatectl status 同上
		timedatectl set-ntp false 禁用ntp命令
		
	--clear命令（清屏）
		


	目录管理命令
	ls [参数选项] 目录名称  列出目录里的内容
		-a：显示所有文件或目录（包含隐藏）
		-d：仅列出目录本身，而不是列出目录内的文件数据（常用）
		-l：长数据串列出，包含文件的属性与权限等数据（常用）
		-al：显示所有文件


d表示目录  属主 属组 大小 时间 文件名
-表示文件
		
	pwd 查看当前所在目录


	cd命令 切换目录
		相对路径
		绝对路径
		
	mkdir命令
	mkdir [-] 文件夹名字 创建文件夹
	mkdir -p bbb/ccc 创建多级目录

	rmdir命令
	rmdir [-] 文件夹名字 删除空的文件夹
	rmdir -p bbb/ccc 删除ccc，如果bbb也是空的，bbb也一起删除
	

	rm命令
	rm [选项] 文件/目录 删除文件夹或目录
	rm -r 文件夹 删除文件夹	
	rm 文件   删除文件
	


	touch 创建文件


	cp命令
	cp [选项] 数据源 目的地 文件复制
	cp -r 文件夹a/* 文件夹b 将文件夹a中的所有东西拷贝到文件夹b
	

	mv命令
	mv [选项] 数据源 目的地 （改名；移动）
	mv aaa/* ccc 将aaa文件夹中的东西全部剪切到ccc文件夹
	

	文件基本属性      权限：  r：可读     w：可写     x：可执行    -：没有权限
	drwxr-xr-x
	第一位：d目录
	              -文件
	              l为链接文档 		
	第2-4位：属主权限
	第5-7位：属组权限
	地8-10位：其他用户权限	



	更改属主和属组权限
	chgrp命令 修改用户组
		chgrp root aaa 把aaa文件所在的用户组修改为root
		chgrp -v root aaa 将aaa的属组修改为root并返回信息
	
	chown命令 修改属主与属组
		chown 属主名 文件名
		chown root aaa 把aaa文件属主修改为root
		chown root:root aaa 把aaa文件的属主与属组都修改为root
		chown -R root:root aaa 把aaa文件夹和里面所有内容的属主与属组改为root

	chmod命令 修改属主、属组、其他用户的权限
		1用数字方式修改  read 4  write 2 execute 1
		     chmod [参数选项] 数字权限 文件或目录
		     chmod -R 770 aaa 将aaa文件夹权限设置为所有者可读可写可执行，用户组可读可写可执行，其他用户无权限
		2符号权限   user 属主权限 u       group 属组权限   g      others 其他权限  o    全部身份  a    rwx   +(加入)  -(除去)  =(设定)
		     chmod -R u=rwx,g=rx,o=r aaa 将aaa文件夹包括里面的所有内容权限设置为所有者可读可写可执行，用户组可读可执行，其他用户可读
			chmod -R o-rwx aaa 将aaa文件夹其他用户权限去除可读可写可执行


文件管理
  	touch命令
	                touch [参数选项] 文件名 如果文件不存在就创建文件，如果存在就修改时间属性
		touch a{1..10}.txt 会创建a1到a10 十个文件
	 	stat 文件   查看文件的详细信息
		
	vi/vim编辑器
		
		vi 只能编辑文本内容，不能对字体段落进行排版；不支持鼠标操作；没有菜单；只有命令
		vim：是从vi发展出来的一个文本编辑器；代码补全、编译及错误跳转等方便编程的功能特别丰富，

			可

		vi/vim三种模式   命令模式，i编辑模式，:末行模式
		vim 文件名
			如果文件存在，会直接打开文件
			如果文件不存在，打开一个临时文件，在保存且退出后，新建一个文件
			

编辑模式i I a A o O        esc退出编辑模式
进入末行模式保存文件   :q 当vim进入文件没有对文件内容做任何操作可以按q退出
		     :q!当vim进入文件对文件内容有操作但不想保存退出
		     :wq正常保存退出
		     :wq!强行保存退出，只针对root用户或文件所有人


	文件查看
		cat 文件名	查看小文件内容                          -n 数字行号  
		less-N 文件名	分屏显示大文件内容		-N行号              对查询结果的快捷键j向前移动一行k向后移动一行G移动到最后一行g移动到第一行q退出less命令
		head-n 文件名	查看文件的前一部分			
		tail-n 文件名	查看文件的最后部分（默认10行）	-数字  显示最后数字行        -f动态显示文件后10行   -4f动态显示文件后4行    -n+2从文件第二行一直显示到文件末尾    -c 45显示文件最后45个字符
		grep 关键字 文件名	根据关键词搜索文本文件内容	（查找操作）-n 把包含关键字的行展示出来       -i把包含关键字的行展示出来，忽略大小写   -v把不包含关键字的行展示出来
				ps -ef | grep -c 关键字   对进程来说-c展示包含关键字的个数

	
		
		
vim定位行
	vim 文件名+行数   查看文件并定位到指定行数

vim异常处理
	如果vim异常退出，在磁盘上可能会保存有交换文件


echo命令
	echo 字符串      			展示文本
	echo 字符串>文件名        		将字符串写到文件中（覆盖文件中的内容）
	echo 字符串>>文件名		将字符串写到文件中（不覆盖文件中的内容）
	cat 不存在的目录 &>> error.log 	将命令失败的结果追加error.log文件的后面
	
awk命令	是一个强大的文本分析工具

	awk '/关键词1|关键词2/'   查找指定关键词
	awk [参数选项] ‘语法’文件
	awk -F‘指定符号’ {print $1,$2,$3,$4}   使用指定符号分割,并把每部分打印出来
	awk $+数字  获取第几段内容
	awk $0 获取当前行内容

	awk -F ' ' {OFS="字符"}{print$1,$2 }  向外输出时的段分割字符串

	toupper() 字符转成大写
	tolower() 字符转成小写
	length() 返回字符长度
	
	cat a.txt | awk -F ' ' {print toupper($1)} 将第一部分转成大写打印出来
	
	使用awk进行计算
	计算总分
	awk -F ' ' 'BEGIN{} {totel=totel+$4}END{print totel,NR}'
		            |	|		|	     |NR表示行数
		            |	|		处理完所有行以后要执行的语句
		            |	处理每一行时要执行的语句
		初始化操作（执行前的语句） 	

	软连接（相当于win下的快捷方式）
	ln -s 目标文件路径 快捷文件路径


	find命令（查找命令）
	find [参数选项] <指定目录> <指定条件> <指定内容> 在指定目录下查找文件
	-name filename 查找名为filename的文件
	-ctime -n或+n 按时间来查找文件 ，-n指n天以内，+n指n天以前
	find . -name "*.txt" 在当前文件夹查找
	find / -name "*.txt" 查找所有
	
	
	压缩命令
	gzip命令
	gzip [参数选项] 文件名  		压缩文件
	gzip -dv 文件名 			解压文件并显示详细信息
	
	gunzip [参数] 文件			解压文件
	
	tar [必要参数] [选择参数] 文件名	打包、压缩和解压（文件或文件夹）常用-vf
	-c 建立新的压缩文件
	-v 显示指令执行过程
	-f <备份文件> 指定压缩文件
	-z 通过gzip指令处理压缩文件
	-t 列出压缩文件中的内容
	-x 表示解压


	tar -cvf 打包文件名 文件名	打包文件并指定打包之后的文件名（仅打包不压缩）
	tar -zcvf 压缩文件名 文件名	压缩文件并指定压缩文件名（打包压缩）
	tar -ztvf 压缩文件名		查看压缩文件中有哪些文件
	tar -zxvf 压缩文件名		解压


	zip命令
	zip [必要参数] [选择参数] [文件] 	压缩
	-q不显示指令执行过程		
	-r 递归处理，将指定目录下的所有文件和子目录一并处理
	zip -q -r 压缩文件名 文件		压缩文件为指定压缩文件名
	
	
	unzip命令
	unzip [必要参数] [选择参数] [文件] 	解压
	-l 显示压缩文件所包含的文件
	-d<目录> 指定文件解压缩后所要存储的目录
	unzip -d 文件夹 压缩文件		将压缩文件解压到指定文件夹

	bzip2命令		
	bzip2 [参数选项] 文件		压缩

	bunzip2 [参数选项] 文件		解压文件
		-v解压并显示详细信息

	
		
网络与磁盘管理命令
	ifconfig显示网卡信息
	ifconfig 网卡名 down      	关闭网卡
	ifconfig 网卡名 up 		启动网卡
	ifconfig 网卡名 ip		修改ip
	ifconfig 网卡名 ip netmask ip 	修改ip和子网掩码
	

	ping命令
	-c<完成次数>		指定ping的次数
	
	netstat命令
	netstat -a		显示详细的网络链接情况
	netstat -i		显示网卡列表
	


硬盘管理命令
	lsblk命令			列出硬盘使用情况
	lsblk -f			显示系统信息

	df命令			显示目前在linux系统上，硬盘的使用情况
	df -h			转换单位显示
	df --total			显示所有信息
	df 文件夹			显示文件夹使用情况
	
	mount命令			用来挂载linux系统以外的东西
	mount -t auto /dev/cdrom aaa 	将光驱挂载在aaa文件夹
	umount aaa			卸载光驱	
		

		


	yum命令 			查找安装下载（下载软件，解决软件的依赖关系，安装）
	1列出所有可更新的软件清单命令   yum check -update
	2更新所有软件命令		     yum update
	3仅安装指定的软件命令	     yum install <package_name>
	4仅更新指定的软件命令	     yum update <package_name>
	5列出所有可更新的软件清单命令   yum list
	6删除软件包命令		     yum remove <package_name>
	7查找软件包命令		     yum search <keyword>
	8清除缓存命令
		yum clean packages   清除缓存目录下的软件包
			  headers     清除缓存目录下的headers
			  oldheaders清除缓存目录下旧的headers
		yum clean ，yum clean all 清除缓存目录下所有的软件包及headers
	[-y当有选择时，全部选择yes]


	更改yum源
	下载wget（wget下载工具）
	cd /etc/yum.repos.d
		yum makecache 建立缓存目录

	rpm 与yum区别
	rpm只能安装已经下载到本地机器上的rpm包



	shell入门（命令解释器）
	默认bash
	新建一个文件为a.sh
	#! /bin/bash
	#这是第一个脚本文件
	echo “itcast”
	echo "nihao"	

	./a.sh  或者bash a.sh   运行a.sh
	
	shell注释
		单行注释#
		多行注释    :<<!                !
		
	shell变量
		定义变量  【普通变量】1变量名=变量值（变量值必须是一个整体，中间没有特殊字符）2变量名='变量值'（单引号中的内容完整赋值）3变量名="变量值" 如果双引号内有使用的变量，会把变量的结果进行拼接，然后赋值
			【命令变量】1变量名=`命令`     (是反引号，不是单引号)        2变量名=$(命令)
			
		
		使用变量   1$变量名               	非标准写法
			2"$变量名"	非标准写法，图省事	
			3${变量名}	在双引号内如果要使用变量的值
			4"${变量名}"	标准使用方式


		只读变量	readonly 变量名	在变量名前加入readonly即变成只读变量
		删除变量 	unset 变量名	删除变量名




	shell数组
	定义数组		arr=(1 2 3 4 5)
	给数组的元素赋值	arr[0]=1
	获取元素		${arr[0]}
	获取长度		${#arr[*]}
			${#arr[@]}



	shell算数运算符
	`expr 2 + 2`
		自增((a++))
	
	字符串运算符(成立返回true)[ "${a}" = "${b}" ]            $?可以获取上一条语句的执行结果
	=
	!=
	-z	判断字符串的长度是否为0，0为真1为假
	-n	判断字符串的长度时候不为0
	$	判断字符串是否为空（不为空返回true）
	${#a}	获取字符串的长度



	关系运算符（只支持数字）
	-eq	判断数字是否相等
	-ne	判断数字是否不相等
	-gt	左边是否大于右边
	-lt	左边是否小于右边
	-ge	左边是否大于等于右边
	-le	左边是否小于等于右边
	

	布尔运算符
	！取反
	-o 或运算
	-a 与运算
	


	逻辑运算符	
	&&	双与  [[ "${a}" -lt 100 && "${b}" -gt 100 ]]
	||	双或



	判断语句
	if [条件]
	then
	    语句体
	else
	fi	
	
	
	if[条件]
	then
	    语句体
	elif[条件]
	then
	    语句体	
	else	
	fi





	选择语句
	
	case 值 in
	模式一)
	        语句块
	;;
	模式二)
	        语句块
	;;
	esac



	for循环
	for 变量 in 范围
	do
	      循环体
	done	
	

	

	while循环
	while 条件
	do
	      循环体
	done


	

	shell函数
（无参无返回值）	函数名(){函数体}                       【调用是直接写函数名就可以】
（有参无返回值）czbk(){
		echo "接收到的第一个参数$1"		
		echo "接收到的第二个参数$2"
		}	
	调用czbk 1 2

（有参有返回值）czbk(){
		echo "接收到的参数$1和$2"		
		return$(( $1 + $2 ))
		}	
	调用czbk 1 2     $?


read 变量名      表示把键盘录入的数据赋值给这个变量	