【企业开发简介】
	1JavaEE规范
	13种技术规范
	WEB
	系统结构:
		基础结构划分:CS结构；BS结构
	技术选型：
		Model1模型；MVC模型
	部署方式划分：
		一体式结构；垂直拆分结构；分布式结构；微服务结构；
	

	【CS结构】：客户端+服务器{更新维护比较麻烦}
	【BS结构】：浏览器+服务器{更新方便}


【Tomcat服务器】

	常用的应用服务器
	重量级服务器：weblogic；websphereAS;JBOSSAS
	轻量级服务器：Tomcat；

	tomcat.apache.org
	【基本使用】
	1启动bin目录下startup.    2关闭shutdown.
	3部署项目：在webapps目录下创建一个文件夹，将资源放到该文件夹，启动tomcat，并配置正确访问路径

	【idea集成tomcat】
	1run中点击edit-configurations；2点击default->Tomcat Server->Local；3configure关联本地路径
	
	通过war包发布

	【Tomcat配置文件】
	主配置文件server.xml
	
	【Tomcat配置虚拟目录】
	虚拟目录：可以发布任意目录下的项目
	1编辑server.xml配置文件，找到<Host>标签
	2加入以下内容
		<Context path="/my(这是访问路径)" docBase="d:my（这是本地路径）"/>
	
	【Tomcat配置虚拟主机】
	虚拟主机作用：可以访问指定路径的名称
	1编辑server.xml配置文件，找到<Engine>标签
	2加入以下内容
		<Host name="www.webdemo.com" appBase="webapps"
			unpackWARs="true" autoDeploy="true">
		       <Context path="" docBase="wedemo"/>
	3修改hosts文件
		

	【HTTP协议】
		超文本传输协议
		基于TCP/IP协议
	
	【HTTP协议的请求】
		1请求的组成部分
			①请求行
			②请求头
			③请求空行
			④请求体
		2请求方式
			GET
			POST
			{只有POST方式有请求体}
	
	【HTTP协议的响应】
		2响应的组成部分
			①响应行
			②响应头
			③响应空行
			④响应体



	【发布静态资源】
	【发布动态资源】
		Servlet是运行在java服务端的程序，用于接收和响应来自客户端的基于HTTP协议的请求。
		核心方法service();任何客户端的请求都会经过该方法
	
	【servlet声明】
	<servlet>
		<servlet-name>名称</servlet-name>
		<servlet-class>路径</servlet-class>
	</servlet>	

	servlet映射
	<servlet-mapping>
		<servlet-name>和声明中的名称完全一样</servlet-name>
		<url-pattern>（在url中访问的路径）/路径</url-pattern>
	</servlet-mapping>				
		

Servlet	
	实现接口或者继承实现类
	Servlet接口	GenericServlet抽象类	HttpServlet抽象类		ServletConfig接口		ServletContext接口
	
·	执行过程
	生命周期：对象从创建到销毁的过程
	线程安全：servlet是线程不安全的，两种方案（1）定义局部变量（2）使用同步代码块sysch
	
	
	【servlet映射方式】
	（1）访问的资源路径必须和映射配置完全相同。
	（2）/+通配符。（只要符合目录结构即可，不用考虑结尾）
	（3）通配符+固定格式结尾。（只要符合固定格式结尾即可，不用考虑前面的路径）

	【servlet多路径映射】
	path.getlastof(/)
	
	【Servlet创建时机】
	1第一次访问时创建
	2服务器加载时创建
	
	修改servlet创建时机
	在xml配置文件中在<servlet>标签中添加<load-on-startup>标签
	正整数代表服务器加载时创建，值越小优先级越高，负整数或不写代表第一次访问时创建


	默认servlet
	
		

	servletConfig
	是cervlet配置参数对象，为每一个servlet提供一些初始化配置
	【配置方式】
	在<servlet>标签中，通过<init-param>标签来配置，有两个子标签。
	<param-name>：代表初始化参数的key
	<param-value>：代表初始化参数的value

	【常用方法】
	返回值			方法名				说明
	String			getInitParameter(String name)	根据参数名称获取参数的值
	Enumeration<String>	getInitParameterName()		获取所有参数名称的枚举
	String			getServletName()			获取Servlet的名称、
	ServletContext		GETservletContext()			获取ServletContext对象
	
	
	1声明ServletConfig
	2通过init方法，来对ServletConfig对象进行赋值
	3演示ServletConfig常用方法
	（1）根据key获取config
		String encodingValue = config.getInitParameter("encoding")
		key.hasMoreElements()
		key.nextElement()

	(2)获取servlet的名称
	config.getServletName();
	
	(3)获取servletContext对象
	config.getServletContext();		
	


	ServletContext
		应用上下文对象，每一个应用中只有一个ServletContext对象
		作用：可以配置和获得应用的全局初始化参数，可以实现Servlet之间的数据共享
		
	域对象：指对象具有作用范围，可以实现数据的共享
	
	

	ServletContext配置方式
	在<web-app>标签中，通过<context-param>标签来配置，有两个子标签
	<param-name>：代表全局初始化参数key
	<param-value>：代表全局初始化参数value

	

	ServletContext常用方法
	返回值		方法名				说明
	String		getInitParamter(String name)		根据名称获取全局配置的参数
	String		getContextPath()			获取当前应用的访问虚拟目录
	String		getRealPath(String name)		根据虚拟目录获取应用部署的磁盘绝对路径
	

	void		setAttribute(String name,Object value)	向应用域对象中存储数据
	Object		getAttribute(String name)		通过名称获取应用域对象中的数据
	void		removeAttribute(String name)		通过名称移除应用域对象中的数据


































【HTTP协议】
【发布静态资源】
HTML，CSS，JavaScript都属于静态资源
【发布动态资源】
JSP，Servlet都属于动态资源