【企业开发简介】
	1JavaEE规范
	13种技术规范
	WEB
	系统结构:
		基础结构划分:CS结构；BS结构
	技术选型：
		Model1模型；MVC模型
	部署方式划分：
		一体式结构；垂直拆分结构；分布式结构；微服务结构；
	

	【CS结构】：客户端+服务器{更新维护比较麻烦}
	【BS结构】：浏览器+服务器{更新方便}


【Tomcat服务器】

	常用的应用服务器
	重量级服务器：weblogic；websphereAS;JBOSSAS
	轻量级服务器：Tomcat；

	tomcat.apache.org
	【基本使用】
	1启动bin目录下startup.    2关闭shutdown.
	3部署项目：在webapps目录下创建一个文件夹，将资源放到该文件夹，启动tomcat，并配置正确访问路径

	【idea集成tomcat】
	1run中点击edit-configurations；2点击default->Tomcat Server->Local；3configure关联本地路径
	
	通过war包发布

	【Tomcat配置文件】
	主配置文件server.xml
	
	【Tomcat配置虚拟目录】
	虚拟目录：可以发布任意目录下的项目
	1编辑server.xml配置文件，找到<Host>标签
	2加入以下内容
		<Context path="/my(这是访问路径)" docBase="d:my（这是本地路径）"/>
	
	【Tomcat配置虚拟主机】
	虚拟主机作用：可以访问指定路径的名称
	1编辑server.xml配置文件，找到<Engine>标签
	2加入以下内容
		<Host name="www.webdemo.com" appBase="webapps"
			unpackWARs="true" autoDeploy="true">
		       <Context path="" docBase="wedemo"/>
	3修改hosts文件
		

	【HTTP协议】
		超文本传输协议
		基于TCP/IP协议
	
	【HTTP协议的请求】
		1请求的组成部分
			①请求行
			②请求头
			③请求空行
			④请求体
		2请求方式
			GET
			POST
			{只有POST方式有请求体}
	
	【HTTP协议的响应】
		2响应的组成部分
			①响应行
			②响应头
			③响应空行
			④响应体



	【发布静态资源】
	【发布动态资源】
		Servlet是运行在java服务端的程序，用于接收和响应来自客户端的基于HTTP协议的请求。
		核心方法service();任何客户端的请求都会经过该方法
	
	【servlet声明】
	<servlet>
		<servlet-name>名称</servlet-name>
		<servlet-class>路径</servlet-class>
	</servlet>	

	servlet映射
	<servlet-mapping>
		<servlet-name>和声明中的名称完全一样</servlet-name>
		<url-pattern>（在url中访问的路径）/路径</url-pattern>
	</servlet-mapping>				
		

Servlet	
	实现接口或者继承实现类
	Servlet接口	GenericServlet抽象类	HttpServlet抽象类		ServletConfig接口		ServletContext接口
	
·	执行过程
	生命周期：对象从创建到销毁的过程
	线程安全：servlet是线程不安全的，两种方案（1）定义局部变量（2）使用同步代码块sysch
	
	
	【servlet映射方式】
	（1）访问的资源路径必须和映射配置完全相同。
	（2）/+通配符。（只要符合目录结构即可，不用考虑结尾）
	（3）通配符+固定格式结尾。（只要符合固定格式结尾即可，不用考虑前面的路径）

	【servlet多路径映射】
	path.getlastof(/)
	
	【Servlet创建时机】
	1第一次访问时创建
	2服务器加载时创建
	
	修改servlet创建时机
	在xml配置文件中在<servlet>标签中添加<load-on-startup>标签
	正整数代表服务器加载时创建，值越小优先级越高，负整数或不写代表第一次访问时创建


	默认servlet
	
		

	servletConfig
	是cervlet配置参数对象，为每一个servlet提供一些初始化配置
	【配置方式】
	在<servlet>标签中，通过<init-param>标签来配置，有两个子标签。
	<param-name>：代表初始化参数的key
	<param-value>：代表初始化参数的value

	【常用方法】
	返回值			方法名				说明
	String			getInitParameter(String name)	根据参数名称获取参数的值
	Enumeration<String>	getInitParameterName()		获取所有参数名称的枚举
	String			getServletName()			获取Servlet的名称、
	ServletContext		GETservletContext()			获取ServletContext对象
	
	
	1声明ServletConfig
	2通过init方法，来对ServletConfig对象进行赋值
	3演示ServletConfig常用方法
	（1）根据key获取config
		String encodingValue = config.getInitParameter("encoding")
		key.hasMoreElements()
		key.nextElement()

	(2)获取servlet的名称
	config.getServletName();
	
	(3)获取servletContext对象
	config.getServletContext();		
	


	ServletContext
		应用上下文对象，每一个应用中只有一个ServletContext对象
		作用：可以配置和获得应用的全局初始化参数，可以实现Servlet之间的数据共享
		
	域对象：指对象具有作用范围，可以实现数据的共享
	
	

	ServletContext配置方式
	在<web-app>标签中，通过<context-param>标签来配置，有两个子标签
	<param-name>：代表全局初始化参数key
	<param-value>：代表全局初始化参数value

	

	ServletContext常用方法
	返回值		方法名				说明
	String		getInitParamter(String name)		根据名称获取全局配置的参数
	String		getContextPath()			获取当前应用的访问虚拟目录
	String		getRealPath(String name)		根据虚拟目录获取应用部署的磁盘绝对路径
	

	void		setAttribute(String name,Object value)	向应用域对象中存储数据
	Object		getAttribute(String name)		通过名称获取应用域对象中的数据
	void		removeAttribute(String name)		通过名称移除应用域对象中的数据




	servlet3.0规范
	自动注解开发的实现步骤
		1创建一个web项目
		2定义一个类，继承HttpServlet方法
		3重写doGet和doPost方法
		4在类上使用@WebServlet注解配置Servlet
		5部署并启动项目
		6测试
	

	手动创建容器的介绍
	实现ServletContainerInitializer接口
		步骤
		1定义一个类，继承HttpServlet方法
		2重写doGet和doPost方法
		3定义一个类，实现ServletContainerInitializer接口
		4在src目录下创建一个META-INF的包
		5在META-INF包下创建一个services的包
		6在services包下创建一个javax.servlet.ServletContainerInitializer的文件
		7文件中的内容为容器实现类的全类名
		8在容器实现类中的onStartup方法中完成注册servlet
		9部署并启动项目
		



	【请求和响应】
		请求对象
			客户端浏览器向服务端发出询问
		请求对象常用方法
			获取各种路径
			返回值		方法名			说明
			String		getContextPath()		获取虚拟目录名称、
			String		getServletPath()		获取Servlet映射路径
			String		getRemoteAddr()		获取访问者ip地址
			String		getQueryString()		获取请求的消息数据
			String		getRequestURI()		获取统一资源标识符
			StringBuffer	getRequestURL()		获取统一资源定位符
		获取请求头信息方法
			String		getHeader(String name)	根据请求头名称获取一个值
			Enumeration<String>	getHeaders(String name)	根据请求头名称获取多个值
			Enumeration<String>	getHeaderNames()		获取所有请求头名称
		获取请求参数信息的方法
			String			getParameter(String name)		根据名称获取数据
			String[]			getParameterValues(String name)	根据名称获取所有数据
			Enumeration<String>	getParameterNames()		获取所有名称
			Map<String,String[]>	getParameterMap()			获取所有参数的键值对
		获取请求参数并封装对象
			1手动封装：逐个调用getParameter
			2反射封装：调用getParameterMap()方式，for遍历，属性描述器PropertyDescriptor pd = new ;pd.getWriteMethod;执行方法，invoke();
			3工具类封装:通过beanutils包，调用getParameterMap()方式，BeanUtils.populate();

		通过流对象获取请求信息（post方式才有）
			BufferedReader		getReader()	获取字符输入流
			ServletInputStream		getInputStream()	获取字节输入流
	
			
	中文乱码问题
	get方式没有乱码问题，post方式有问题，可以通过setCharacterEncoding()方法来解决
	（在获取参数之前使用req.setCharacterEncoding()来解决中文乱码问题）
	
	请求域：可以在一次范围内进行数据共享
		请求对象操作共享数据方法
			void			setAttribute(String name,Object value)	向请求域对象中存储数据
			Object			getAttribute(String name)		通过名称获取请求域对象中的数据
			void			removeAttribute(String name)		通过名称移除请求域对象中的数据
	
	请求转发：客户端的请求到达之后，需要借助其他servlet来实现功能
		特点：	浏览器地址栏不变
			域对象中的数据不丢失
			负责转发的servlet转发前后的响应正文会丢失
			由转发的目的地来响应客户端
		方法：
			返回值			方法名				说明
			RequestDispatcher		getRequestDispatcher(String name)	获取请求调度对象
			void			forward(ServletRequest req,ServletResponse resp)		实现转发
	
	请求包含：可以合并其他servlet的功能一起响应给客户端
		特点：	浏览器地址栏不变
			域对象中的数据不丢失
			被包含的servlet的响应头会丢失
		方法：	
			RequestDispatcher		getRequestDispatcher(String name)	获取请求调度对象
			void			include(ServletRequest req,ServletResponse resp)		实现包含
	



	【响应对象】
		常见状态码
			200	成功
			302	重定向
			304	请求资源未改变，使用缓存
			400	请求错误，常见于请求参数错误
			404	请求资源未找到
			405	请求方式不支持
			500	服务器错误
						
	
	字节流响应消息resp	
			ServletOutputStream	getOutputStream()			获取响应字节输出流对象
			void			setContentType("text/html;charset=UTF-8")	设置响应内容类型，解决中文乱码问题
			
·	字符流响应消息	
			PrintWriter		getWriter()			获取响应字符输出流对象
			void			setContentType("text/html;charset=UTF-8")	设置响应内容类型，解决中文乱码问题


·	响应图片
		//        通过文件相对路径获取绝对路径
        		String realPath = getServletContext().getRealPath("/img/visa.png");
       		 //        1创建字节输入流对象
       		 BufferedInputStream bis = new BufferedInputStream(new FileInputStream(realPath));
		//        2通过响应对象获取字节输出流对象
    		 ServletOutputStream os = resp.getOutputStream();
		//        3循环读写
        		byte[] arr = new byte[1024];
       		 int len = 0;
       		 while ((len = bis.read(arr)) != -1) {
            		os.write(arr, 0, len);

       		 }
		//        4释放资源
        		bis.close();
		{1创建字节输入流对象，关联读取的图片路径
		2通过响应对象获取字节输出流对象
		3循环读取和写出图片
		4关闭流}


	设置缓存
		缓存：对于不经常变化的数据，我们可以设置合理缓存时间，以避免浏览器频繁请求服务器，以此来提高效率
	
























【HTTP协议】
【发布静态资源】
HTML，CSS，JavaScript都属于静态资源
【发布动态资源】
JSP，Servlet都属于动态资源